//
// Uncomment the blocks "externalNativeBuild" for building the app with liblsl (LSL) from the source
// code using CMake. Make sure you have liblsl's source code
// (https://github.com/sccn/liblsl/releases/latest -> Source code) on /app-root/liblsl or the path
// you specified on the block "externalNativeBuild.cmake" -> path "./liblsl-path/CMakeLists.txt"
//
// In case of an external CMake installation (https://cmake.org/download/ -> Binary distributions),
// specify cmake.dir=path on local.properties, e.g. cmake.dir=/home/user/Android/SDK/cmake/3.18.0
// Otherwise you can install CMake using Android Studio's menu via Tools -> SDK Manager -> SDK Tools
// In case of external CMake installation, you will need the Ninja binary inside your cmake/bin
// folder to make the build work: https://github.com/ninja-build/ninja/releases/latest
//
// Comment the "externalNativeBuild" blocks for building the app using the compiled library
// (liblsl.so). Once the build succeeds, the library files (.so) are automatically copied inside
// the folders:
// /project-root/app/src/debug/jniLibs (for a debug build)
// /project-root/app/src/main/jniLibs (for a release build)
// IMPORTANT to use LSL on your code:
// - Take the the last version of LSL.java:
// https://github.com/labstreaminglayer/liblsl-Java/blob/master/src/edu/ucsd/sccn/LSL.java
// And copy it inside your app module source code folder (don't forget your package import at the
// top -> package your.package.app.name;). E.g.: /app-root/module/src/main/java/path-to-the-source/
// - Include the following permission on your AndroidManifest.xml:
// <uses-permission android:name="android.permission.INTERNET" />
// - Include the jna (Java Native Access) in your dependencies block. E.g.:
// implementation 'net.java.dev.jna:jna:5.10.0@aar'
//

apply plugin: 'com.android.application'

// The sample build uses multiple directories to
// keep boilerplate and common code separate from
// the main sample code.
List<String> dirs = [
        'main',     // main sample code; look here for the interesting stuff.
        'common',   // components that are reused by multiple samples
        'template'] // boilerplate code that is generated by the sample template process

def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(file('../keystore.properties')))

android {
    signingConfigs {
        debug {
            storeFile file('key.jks')
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
        }
        release {
            storeFile file('key.jks')
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
        }
    }
    compileSdkVersion 31
    defaultConfig {
        applicationId 'de.uos.ikw.eegdroid'
        minSdkVersion 24
        versionCode 1
        versionName 'beta-2.6.8'
        vectorDrawables.useSupportLibrary = true
        setProperty('archivesBaseName', "EEGDroid-$versionName")
        ndk {
            // Specifies the ABI configurations of your native
            // libraries Gradle should build and package with your app.
            abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
        }
//        externalNativeBuild.cmake {
//            arguments "-DANDROID_CPP_FEATURES=rtti exceptions", "-DLSL_NO_FANCY_LIBNAME=1", "-DANDROID_PLATFORM=24"
//            targets "lsl"
//        }
    }
//    externalNativeBuild.cmake {
//        path "./liblsl/CMakeLists.txt"
//    }
    buildTypes {
        debug {
            debuggable true
            jniDebuggable true
            renderscriptDebuggable true
            signingConfig signingConfigs.debug
        }
        release {
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
            signingConfig signingConfigs.release
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            dirs.each { dir ->
                java.srcDirs "src/${dir}/java"
                res.srcDirs "src/${dir}/res"
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    packagingOptions {
        jniLibs {
            pickFirsts += ['**/lib/**']
        }
        resources {
            pickFirsts += ['**/lib/**']
        }
    }
    buildToolsVersion '32.0.0'
    ndkVersion '21.4.7075529'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.legacy:legacy-support-v13:1.0.0'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.preference:preference:1.2.0'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.vectordrawable:vectordrawable:1.2.0-alpha02'
    implementation 'com.atlassian.commonmark:commonmark:0.17.0'
    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'
    implementation 'com.google.android.material:material:1.6.0-alpha02'
    implementation 'com.opencsv:opencsv:5.5.2'
    implementation 'net.java.dev.jna:jna:5.10.0@aar'
    implementation 'org.apache.commons:commons-math3:3.6.1'
    implementation 'org.bytedeco.javacpp-presets:fftw-platform:3.3.8-1.4.4'
    implementation 'ru.noties.markwon:core:3.1.0'
    implementation 'us.feras.mdv:markdownview:1.1.0'
}

// copy native libraries to per project location
task copyDebugJniLibs(type: Copy) {
    from 'build/intermediates/cmake/debug/obj'
    include('**/*.*')
    into 'src/debug/jniLibs'
}
task copyReleaseJniLibs(type: Copy) {
    from 'build/intermediates/cmake/release/obj'
    include('**/*.*')
    into 'src/main/jniLibs'
}

tasks.whenTaskAdded { task ->
    if (task.name == 'assembleDebug') task.finalizedBy('copyDebugJniLibs')
    if (task.name == 'assembleRelease') task.finalizedBy('copyReleaseJniLibs')
}